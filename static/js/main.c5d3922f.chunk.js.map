{"version":3,"sources":["Components/Section.js","Components/Redux/contacts/contacts-actions.js","Components/Redux/contacts/contacts-operations.js","Components/Redux/contacts/contacts-selectors.js","Components/Form/Form.js","Components/Filter/Filter.js","Components/ContactList/ContactList.js","App.js","Components/Redux/contacts/contacts-reducer.js","Components/Redux/store.js","index.js"],"names":["Section","title","children","defaultProps","filter","createAction","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","fetchContactsRequest","fetchContactsSuccess","fetchContactsError","axios","defaults","baseURL","getFilter","state","contacts","getContactsItems","items","getContactsFiltred","createSelector","filterValue","e","name","toLowerCase","includes","connect","dispatch","addContacts","x","prepare","contact","number","post","then","data","catch","error","useState","setName","setNomber","inputChange","currentTarget","value","className","onSubmit","preventDefault","length","alert","type","pattern","required","onChange","target","contactsFiltred","onDeleteContact","id","delete","deleteContact","fetchContacts","a","get","useEffect","map","onClick","App","itemsReducer","createReducer","_","payload","loading","filterReducer","combineReducers","middleware","getDefaultMiddleware","logger","store","configureStore","reducer","contactsReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c5d3922f.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children }) => (\r\n    <div>\r\n        {title && <h2>{title}</h2>}\r\n        {children}\r\n    </div>\r\n);\r\n\r\nSection.defaultProps = {\r\n    title: \"\",\r\n    children: [],\r\n};\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string,\r\n    children: PropTypes.node,\r\n};\r\n\r\nexport default Section;","\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\n\r\nexport const filter = createAction('FILTER');\r\n\r\nexport const addContactRequest = createAction('ADD_REQUEST');\r\nexport const addContactSuccess = createAction('ADD_SUCCESS');\r\nexport const addContactError = createAction('ADD_ERROR');\r\n\r\nexport const deleteContactRequest = createAction('DELETE_REQUEST');\r\nexport const deleteContactSuccess = createAction('DELETE_SUCCESS');\r\nexport const deleteContactError = createAction('DELETE_ERROR');\r\n\r\nexport const fetchContactsRequest = createAction('FETCH_REQUEST');\r\nexport const fetchContactsSuccess = createAction('FETCH_SUCCESS');\r\nexport const fetchContactsError = createAction('FETCH_ERROR');\r\n","import { addContactRequest, addContactSuccess, addContactError, deleteContactError ,deleteContactRequest ,deleteContactSuccess,fetchContactsError,fetchContactsRequest ,fetchContactsSuccess } from \"./contacts-actions\";\r\nimport axios from \"axios\";\r\n\r\naxios.defaults.baseURL = \"http://localhost:4040\";\r\n\r\nexport const addContact = prepare => dispatch => {\r\n    const contact = {\r\n        name: prepare.name,\r\n        number: prepare.number\r\n    };\r\n    dispatch(addContactRequest());    \r\n    \r\n    axios.post('/contacts', contact)\r\n        .then(({ data }) => dispatch(addContactSuccess(data)))\r\n        .catch(error => dispatch(addContactError(error)));\r\n};\r\n\r\nexport const deleteContact = id => dispatch => {\r\n    dispatch(deleteContactRequest());\r\naxios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(deleteContactSuccess(id)))\r\n    .catch(error => dispatch(deleteContactError(error)));   \r\n};\r\n\r\nexport const fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n\r\n    dispatch(fetchContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactsError(error));\r\n  }\r\n\r\n  // axios\r\n  //   .get('/todos')\r\n  //   .then(({ data }) => dispatch(fetchTodosSuccess(data)))\r\n  //   .catch(error => dispatch(fetchTodosError(error)));\r\n};\r\n","import { createSelector } from '@reduxjs/toolkit'; \r\n\r\n\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nexport const getContactsItems = state => state.contacts.items;\r\n\r\nexport const getContactsFiltred = createSelector(\r\n    [getFilter, getContactsItems],\r\n    (filterValue, contacts) => {\r\n  return contacts.filter(e => e.name.toLowerCase().includes(filterValue.toLowerCase())) ;\r\n});","import  { useState } from 'react';\r\nimport './Form.css';\r\nimport { connect } from 'react-redux';\r\nimport { addContact } from '../Redux/contacts/contacts-operations';\r\nimport { getContactsItems } from '../Redux/contacts/contacts-selectors';\r\n\r\n\r\nfunction Form({contacts, addContacts }) {\r\n  const [name, setName] = useState('');\r\n  const [number, setNomber] = useState('');\r\n  const inputChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n    switch (name) {\r\n      case 'name': setName(value); break;\r\n      case 'number': setNomber(value); break;\r\n      default: return;\r\n    }\r\n  };\r\n  const formSabmit = e => {\r\n    e.preventDefault();\r\n    if (contacts.filter(e => e.name === name).length === 0) {\r\n      addContacts({ name, number });\r\n    }\r\n    else {\r\n      alert(`${name} уже существует в контактах!`);\r\n    }\r\n    setNomber('');\r\n    setName('');\r\n  }\r\n  return (\r\n            <form  className=\"form\"onSubmit={formSabmit}>\r\n             <label >\r\n               Имя\r\n               <input\r\n                type=\"text\"\r\n                name=\"name\"\r\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                required\r\n                value={name}\r\n                onChange={inputChange}\r\n               />\r\n                </label>\r\n             <label >\r\n               Номер телефона\r\n               <input\r\n                type=\"tel\"\r\n                name=\"number\"\r\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                required\r\n                value={number}\r\n                onChange={inputChange}\r\n               />\r\n             </label>\r\n             <button title=\"submit\">Добавить контакт</button>\r\n            </form>\r\n        );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n   return {contacts: getContactsItems(state)};\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n\r\n   return {\r\n     addContacts: x => dispatch(addContact(x))\r\n   };\r\n};\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Form);","import \"./Filter.css\";\r\nimport { connect } from 'react-redux';\r\nimport {filter } from '../Redux/contacts/contacts-actions';\r\nimport { getFilter } from '../Redux/contacts/contacts-selectors';\r\n\r\nfunction Filter({ filter, inputChange }) {\r\n    return (\r\n        <label className=\"Filter\">\r\n        Поиск контакта по имени\r\n        <input\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        value={filter}\r\n        onChange={inputChange}\r\n        />\r\n        </label>\r\n    );\r\n};\r\nconst mapStateToProps = state => {\r\n   return {filter: getFilter(state)}\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\r\n   return {\r\n     inputChange: (x) => dispatch(filter(x.target.value)),\r\n   };\r\n};    \r\nexport default connect(mapStateToProps,mapDispatchToProps)(Filter);\r\n","import { useEffect} from 'react';\r\nimport './ContactList.css';\r\nimport { connect } from 'react-redux';\r\nimport { deleteContact, fetchContacts } from '../Redux/contacts/contacts-operations';\r\nimport { getContactsFiltred } from '../Redux/contacts/contacts-selectors';\r\n\r\n\r\nfunction ContactList({ contactsFiltred, onDeleteContact,fetchContacts }) {\r\n   useEffect(() => {\r\n      fetchContacts()\r\n  }, [fetchContacts]);\r\n   return (\r\n   <ul className=\"ContactList\">\r\n      {contactsFiltred.map(contact =>\r\n         <li key={contact.id} >\r\n            <p>{contact.name}: {contact.number}</p>\r\n            <button onClick={()=>onDeleteContact(contact.id)}>Удалить</button>\r\n         </li>\r\n      )}\r\n   </ul> \r\n);\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n   return {contactsFiltred: getContactsFiltred(state)};\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\r\n   return {\r\n      onDeleteContact: (id) => dispatch(deleteContact(id)),\r\n      fetchContacts: ()  => dispatch(fetchContacts()),\r\n   };\r\n};\r\nexport default connect(mapStateToProps,mapDispatchToProps)(ContactList);","import './App.css';\nimport Section from './Components/Section';\nimport Form from './Components/Form';\nimport Filter from './Components/Filter';\nimport ContactList from './Components/ContactList';\n\nexport default function App() {\n\n  return (\n      <div className=\"App\">\n        <Section title=\"Телефонная книга\">\n          <Form/>\n        </Section>\n        <Section title=\"Контакты\">\n          <Filter />\n        <ContactList/>\n        </Section>\n      </div>\n    );\n};\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {addContactRequest,addContactSuccess, addContactError ,deleteContactError,deleteContactRequest,deleteContactSuccess, filter,fetchContactsError,fetchContactsRequest ,fetchContactsSuccess} from './contacts-actions';\r\n\r\nconst initialState = [];\r\nconst itemsReducer = createReducer(initialState, {\r\n    [fetchContactsSuccess]: (_, { payload }) => payload,\r\n    [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n    [deleteContactSuccess]: (state, {payload})=> {\r\n        const contacts = state.filter(contact => contact.id !== payload);\r\n        return contacts;\r\n    }\r\n    \r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  \r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n    [addContactError]: () => false,\r\n  [fetchContactsRequest]: () => true,\r\n  [fetchContactsSuccess]: () => false,\r\n    [fetchContactsError]: () => false,\r\n   [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n \r\n});\r\n\r\nconst filterReducer = createReducer('', {\r\n    [filter]: (state, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n    items: itemsReducer,\r\n    filter: filterReducer,\r\n    loading,\r\n});\r\n","\r\nimport contactsReducer from './contacts/contacts-reducer';\r\nimport { configureStore, getDefaultMiddleware} from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\n\r\nconst middleware = [...getDefaultMiddleware(), logger];\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n  middleware,\r\n});\r\n\r\nexport default store;\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './Components/Redux/store';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App /> \n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}